// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionType {
  Call
  Brief
  Meet
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Company {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  name        String    @db.VarChar(255)
  TIN         String?
  dateRegistr String?
  address     String?
  owner       String?
  mainOKVED   String?
  comment     String?
  cases       Case[]
  contacts    Contact[]

  @@map("company")
}

model Contact {
  id        String  @id @default(cuid())
  phone     String
  name      String?
  mail      String?
  comment   String?
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("contact")
}

model Case {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  type      ActionType @default(Call)
  comment   String?
  date      DateTime?
  finished  Boolean    @default(false)
  companyId String
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("case")
}
